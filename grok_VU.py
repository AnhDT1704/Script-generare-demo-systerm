import os
import shutil
import json
import hashlib
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import subprocess
import sys

from moviepy.editor import VideoFileClip
import google.generativeai as genai
import base64
import tempfile
import time
import subprocess
from pathlib import Path
import PIL.Image
import io
from openai import OpenAI
import re
import httpx  # Th√™m import httpx cho OpenRouter client

@dataclass
class VideoInfo:
    id: str
    original_name: str
    stored_path: str
    compressed_path: Optional[str]
    duration: float
    width: int
    height: int
    file_size_mb: float
    upload_time: str
    analysis_result: Optional[str] = None
    status: str = "uploaded"  # uploaded, processing, analyzed, error

class OptimizedVideoAnalyzer:
    """
    Class ph√¢n t√≠ch video t·ªëi ∆∞u v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p backup
    """
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
        self.temp_dir = tempfile.mkdtemp()
        
    def analyze_video_robust(self, video_path: str) -> str:
        """
        Ph√¢n t√≠ch video v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p backup
        
        Args:
            video_path (str): ƒê∆∞·ªùng d·∫´n video
            
        Returns:
            str: M√¥ t·∫£ n·ªôi dung video
        """
        # Ph∆∞∆°ng ph√°p 1: Ph√¢n t√≠ch video tr·ª±c ti·∫øp
        try:
            print(f"üé¨ Ph∆∞∆°ng ph√°p 1 - Upload video: {os.path.basename(video_path)}")
            return self.analyze_video_direct(video_path)
        except Exception as e:
            print(f"‚ùå Ph∆∞∆°ng ph√°p 1 th·∫•t b·∫°i: {e}")
            
        # Ph∆∞∆°ng ph√°p 2: Ph√¢n t√≠ch qua frames
        try:
            print(f"üñºÔ∏è Ph∆∞∆°ng ph√°p 2 - Ph√¢n t√≠ch frames: {os.path.basename(video_path)}")
            return self.analyze_video_frames(video_path)
        except Exception as e:
            print(f"‚ùå Ph∆∞∆°ng ph√°p 2 th·∫•t b·∫°i: {e}")
            
        # Ph∆∞∆°ng ph√°p 3: M√¥ t·∫£ d·ª±a tr√™n metadata
        print(f"üìä Ph∆∞∆°ng ph√°p 3 - M√¥ t·∫£ metadata: {os.path.basename(video_path)}")
        return self.analyze_video_metadata(video_path)
    
    def analyze_video_direct(self, video_path: str) -> str:
        """Ph√¢n t√≠ch video tr·ª±c ti·∫øp qua Gemini"""
        # Ki·ªÉm tra file size
        file_size = os.path.getsize(video_path) / (1024 * 1024)
        if file_size > 100:
            raise Exception(f"File qu√° l·ªõn ({file_size:.1f}MB), c·∫ßn n√©n tr∆∞·ªõc")
        
        # Upload v·ªõi retry
        max_retries = 3
        for attempt in range(max_retries):
            try:
                video_file = genai.upload_file(path=video_path)
                print(f"‚úÖ Upload th√†nh c√¥ng (l·∫ßn {attempt + 1})")
                
                # Ch·ªù x·ª≠ l√Ω
                time.sleep(3)
                
                prompt = """
                Ph√¢n t√≠ch video n√†y v√† tr·∫£ v·ªÅ CH·ªà trong ƒë·ªãnh d·∫°ng sau, kh√¥ng th√™m b·∫•t k·ª≥ n·ªôi dung n√†o kh√°c:
                1. B·ªëi c·∫£nh, m√¥i tr∆∞·ªùng ch√≠nh: [m√¥ t·∫£ chi ti·∫øt]
                2. Nh√¢n v·∫≠t/ƒë·ªëi t∆∞·ª£ng xu·∫•t hi·ªán: [m√¥ t·∫£ chi ti·∫øt]
                3. Ho·∫°t ƒë·ªông ch√≠nh di·ªÖn ra: [m√¥ t·∫£ c·ª±c k√¨ chi ti·∫øt, ƒë·∫ßy ƒë·ªß th√¥ng tin]
                4. C·∫£m x√∫c, kh√¥ng kh√≠: [m√¥ t·∫£ chi ti·∫øt]
                """
                
                response = self.model.generate_content([video_file, prompt])
                
                # Cleanup
                video_file.delete()
                
                if response and response.text:
                    return response.text.strip()
                else:
                    raise Exception("Gemini tr·∫£ v·ªÅ response tr·ªëng")
                    
            except Exception as e:
                print(f"‚ùå L·∫ßn th·ª≠ {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    time.sleep(5)
                else:
                    raise e
    
    def analyze_video_frames(self, video_path: str) -> str:
        """Ph√¢n t√≠ch video qua frames"""
        video = VideoFileClip(video_path)
        total_frames = int(video.fps * video.duration)
        
        # L·∫•y 3 frames: ƒë·∫ßu, gi·ªØa, cu·ªëi
        frame_positions = [0, total_frames//2, total_frames-1]
        images = []
        
        for pos in frame_positions:
            time = pos / video.fps
            frame = video.get_frame(time)
            # Resize frame to 640x480
            pil_image = PIL.Image.fromarray(frame).resize((640, 480))
            images.append(pil_image)
        
        video.close()
        
        if not images:
            raise Exception("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t frames")
        
        prompt = f"""
        D·ª±a v√†o {len(images)} frames t·ª´ video, m√¥ t·∫£ n·ªôi dung ch√≠nh:
        Ph√¢n t√≠ch video n√†y v√† tr·∫£ v·ªÅ CH·ªà trong ƒë·ªãnh d·∫°ng sau, kh√¥ng th√™m b·∫•t k·ª≥ n·ªôi dung n√†o kh√°c:
                1. B·ªëi c·∫£nh, m√¥i tr∆∞·ªùng ch√≠nh: [m√¥ t·∫£ chi ti·∫øt]
                2. Nh√¢n v·∫≠t/ƒë·ªëi t∆∞·ª£ng xu·∫•t hi·ªán: [m√¥ t·∫£ chi ti·∫øt]
                3. Ho·∫°t ƒë·ªông ch√≠nh di·ªÖn ra: [m√¥ t·∫£ chi ti·∫øt]
                4. C·∫£m x√∫c, kh√¥ng kh√≠: [m√¥ t·∫£ chi ti·∫øt]
        """
        
        content = [prompt] + images
        response = self.model.generate_content(content)
        
        return response.text.strip() if response and response.text else "N·ªôi dung video ch∆∞a x√°c ƒë·ªãnh"
    
    def analyze_video_metadata(self, video_path: str) -> str:
        """T·∫°o m√¥ t·∫£ d·ª±a tr√™n metadata"""
        try:
            video = VideoFileClip(video_path)
            duration = video.duration
            video.close()
            
            # D√πng AI ƒë·ªÉ sinh m√¥ t·∫£ h·ª£p l√Ω
            prompt = f"""
            D·ª±a v√†o th√¥ng tin:
            - Video th·ªùi l∆∞·ª£ng: {duration:.1f} gi√¢y
            - T√™n file: {os.path.basename(video_path)}
            
            H√£y t·∫°o m√¥ t·∫£ h·ª£p l√Ω cho c·∫£nh video n√†y.
            V√≠ d·ª•:
            - 5-15s: c·∫£nh gi·ªõi thi·ªáu, logo, ch√†o m·ª´ng
            - 15-30s: c·∫£nh chuy·ªÉn ti·∫øp, ho·∫°t ƒë·ªông
            - 30s+: n·ªôi dung ch√≠nh, bi·ªÉu di·ªÖn, giao l∆∞u
            
            Tr·∫£ v·ªÅ m√¥ t·∫£ chi ti·∫øt v·ªÅ n·ªôi dung video.
            """
            
            response = self.model.generate_content(prompt)
            return response.text.strip() if response and response.text else f"C·∫£nh video th·ªùi l∆∞·ª£ng {duration:.0f} gi√¢y"
            
        except Exception as e:
            return f"C·∫£nh video (metadata error: {e})"
    
    def cleanup(self):
        """D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m"""
        try:
            shutil.rmtree(self.temp_dir)
        except Exception as e:
            print(f"L·ªói d·ªçn d·∫πp: {e}")

class VideoStorageManager:
    def __init__(self, storage_root: str = "./video_storage"):
        """
        Kh·ªüi t·∫°o h·ªá th·ªëng l∆∞u tr·ªØ video
        
        Args:
            storage_root (str): Th∆∞ m·ª•c g·ªëc l∆∞u tr·ªØ
        """
        self.storage_root = Path(storage_root)
        self.original_dir = self.storage_root / "originals"
        self.compressed_dir = self.storage_root / "compressed"
        self.db_path = self.storage_root / "video_database.db"
        
        # T·∫°o th∆∞ m·ª•c
        self.original_dir.mkdir(parents=True, exist_ok=True)
        self.compressed_dir.mkdir(parents=True, exist_ok=True)
        
        # Kh·ªüi t·∫°o database
        self.init_database()
    
    def init_database(self):
        """Kh·ªüi t·∫°o SQLite database ƒë·ªÉ qu·∫£n l√Ω metadata"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS videos (
                id TEXT PRIMARY KEY,
                original_name TEXT,
                stored_path TEXT,
                compressed_path TEXT,
                duration REAL,
                width INTEGER,
                height INTEGER,
                file_size_mb REAL,
                upload_time TEXT,
                analysis_result TEXT,
                status TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def generate_video_id(self, file_path: str) -> str:
        """
        T·∫°o ID duy nh·∫•t cho video d·ª±a tr√™n hash
        
        Args:
            file_path (str): ƒê∆∞·ªùng d·∫´n file
            
        Returns:
            str: Video ID
        """
        with open(file_path, 'rb') as f:
            file_hash = hashlib.md5(f.read()).hexdigest()
        return file_hash[:16]
    
    def extract_video_metadata(self, video_path: str) -> Dict:
        """
        Tr√≠ch xu·∫•t metadata t·ª´ video
        
        Args:
            video_path (str): ƒê∆∞·ªùng d·∫´n video
            
        Returns:
            Dict: Metadata video
        """
        video = VideoFileClip(video_path)
        
        duration = video.duration
        width, height = video.size
        file_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        
        video.close()
        
        return {
            "duration": duration,
            "width": width,
            "height": height,
            "file_size_mb": file_size_mb
        }
    
    def store_video(self, video_path: str, original_name: str = None) -> str:
        """
        L∆∞u tr·ªØ video v√†o h·ªá th·ªëng
        
        Args:
            video_path (str): ƒê∆∞·ªùng d·∫´n video g·ªëc
            original_name (str): T√™n g·ªëc c·ªßa file
            
        Returns:
            str: Video ID
        """
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"Video kh√¥ng t·ªìn t·∫°i: {video_path}")
        
        # T·∫°o ID v√† t√™n file
        video_id = self.generate_video_id(video_path)
        if original_name is None:
            original_name = os.path.basename(video_path)
        
        # Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i ch∆∞a
        if self.get_video_info(video_id):
            print(f"Video ƒë√£ t·ªìn t·∫°i: {video_id}")
            return video_id
        
        # Tr√≠ch xu·∫•t metadata
        metadata = self.extract_video_metadata(video_path)
        
        # Copy file g·ªëc
        file_extension = os.path.splitext(original_name)[1]
        stored_path = self.original_dir / f"{video_id}{file_extension}"
        shutil.copy2(video_path, stored_path)
        
        # T·∫°o VideoInfo
        video_info = VideoInfo(
            id=video_id,
            original_name=original_name,
            stored_path=str(stored_path),
            compressed_path=None,
            duration=metadata["duration"],
            width=metadata["width"],
            height=metadata["height"],
            file_size_mb=metadata["file_size_mb"],
            upload_time=datetime.now().isoformat(),
            status="uploaded"
        )
        
        # L∆∞u v√†o database
        self.save_video_info(video_info)
        
        print(f"‚úÖ ƒê√£ l∆∞u tr·ªØ video: {original_name} -> {video_id}")
        return video_id
    
    def compress_and_store(self, video_id: str) -> bool:
        """
        N√©n v√† l∆∞u tr·ªØ version n√©n c·ªßa video
        
        Args:
            video_id (str): ID video
            
        Returns:
            bool: True n·∫øu n√©n th√†nh c√¥ng
        """
        video_info = self.get_video_info(video_id)
        if not video_info:
            return False
        
        # N·∫øu ƒë√£ c√≥ version n√©n
        if video_info.compressed_path and os.path.exists(video_info.compressed_path):
            return True

        # N·∫øu file nh·ªè h∆°n 100MB, kh√¥ng c·∫ßn n√©n
        if video_info.file_size_mb <= 100:
            video_info.compressed_path = video_info.stored_path
            self.save_video_info(video_info)
            return True
        
        # N√©n video
        try:
            compressed_path = self.compressed_dir / f"{video_id}_compressed.mp4"
            
            if self._compress_video_opencv(video_info.stored_path, str(compressed_path)):
                video_info.compressed_path = str(compressed_path)
                video_info.status = "compressed"
                self.save_video_info(video_info)
                print(f"‚úÖ ƒê√£ n√©n video {video_id}")
                return True
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ n√©n video {video_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói n√©n video {video_id}: {e}")
            return False
    
    def _compress_video_opencv(self, input_path: str, output_path: str) -> bool:
        """N√©n video b·∫±ng moviepy"""
        try:
            video = VideoFileClip(input_path)
            
            # T·ªëi ∆∞u th√¥ng s·ªë
            new_fps = min(video.fps, 24)
            new_width = min(video.size[0], 1280)
            new_height = min(video.size[1], 720)
            
            # Gi·ªØ t·ª∑ l·ªá khung h√¨nh
            if video.size[0] > video.size[1]:
                new_height = int(new_width * video.size[1] / video.size[0])
            else:
                new_width = int(new_height * video.size[0] / video.size[1])
            
            # Resize v√† n√©n video
            resized_clip = video.resize(width=new_width)
            
            # N√©n v·ªõi bitrate th·∫•p h∆°n ƒë·ªÉ ƒë·∫°t k√≠ch th∆∞·ªõc m·ª•c ti√™u (30MB)
            target_size_mb = 30
            duration = video.duration
            target_bitrate = str(int((target_size_mb * 8192) / duration)) + 'k'
            
            resized_clip.write_videofile(
                output_path,
                fps=new_fps,
                preset='veryslow',  # N√©n ch·∫•t l∆∞·ª£ng cao nh·∫•t c√≥ th·ªÉ
                bitrate=target_bitrate,
                codec='libx264'
            )
            
            video.close()
            resized_clip.close()
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            new_size = os.path.getsize(output_path) / (1024 * 1024)
            return new_size < 30
            
        except Exception as e:
            print(f"L·ªói n√©n OpenCV: {e}")
            return False
    
    def save_video_info(self, video_info: VideoInfo):
        """L∆∞u th√¥ng tin video v√†o database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO videos 
            (id, original_name, stored_path, compressed_path, duration, width, height, 
             file_size_mb, upload_time, analysis_result, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            video_info.id, video_info.original_name, video_info.stored_path,
            video_info.compressed_path, video_info.duration, video_info.width,
            video_info.height, video_info.file_size_mb, video_info.upload_time,
            video_info.analysis_result, video_info.status
        ))
        
        conn.commit()
        conn.close()
    
    def get_video_info(self, video_id: str) -> Optional[VideoInfo]:
        """L·∫•y th√¥ng tin video t·ª´ database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM videos WHERE id = ?', (video_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return VideoInfo(
                id=row[0], original_name=row[1], stored_path=row[2],
                compressed_path=row[3], duration=row[4], width=row[5],
                height=row[6], file_size_mb=row[7], upload_time=row[8],
                analysis_result=row[9], status=row[10]
            )
        return None
    
    def get_all_videos(self) -> List[VideoInfo]:
        """L·∫•y danh s√°ch t·∫•t c·∫£ video ƒë√£ l∆∞u tr·ªØ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM videos ORDER BY upload_time DESC')
        rows = cursor.fetchall()
        conn.close()
        
        videos = []
        for row in rows:
            videos.append(VideoInfo(
                id=row[0], original_name=row[1], stored_path=row[2],
                compressed_path=row[3], duration=row[4], width=row[5],
                height=row[6], file_size_mb=row[7], upload_time=row[8],
                analysis_result=row[9], status=row[10]
            ))
        
        return videos
    
    def get_video_for_analysis(self, video_id: str) -> Optional[str]:
        """
        L·∫•y ƒë∆∞·ªùng d·∫´n video t·ªëi ∆∞u ƒë·ªÉ ph√¢n t√≠ch
        
        Args:
            video_id (str): ID video
            
        Returns:
            Optional[str]: ƒê∆∞·ªùng d·∫´n video (∆∞u ti√™n compressed n·∫øu c√≥)
        """
        video_info = self.get_video_info(video_id)
        if not video_info:
            return None
        
        # ∆Øu ti√™n file n√©n n·∫øu c√≥
        if video_info.compressed_path and os.path.exists(video_info.compressed_path):
            return video_info.compressed_path
        
        # Fallback v·ªÅ file g·ªëc
        if os.path.exists(video_info.stored_path):
            return video_info.stored_path
        
        return None
    
    def update_analysis_result(self, video_id: str, analysis_result: str):
        """C·∫≠p nh·∫≠t k·∫øt qu·∫£ ph√¢n t√≠ch"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE videos 
            SET analysis_result = ?, status = 'analyzed'
            WHERE id = ?
        ''', (analysis_result, video_id))
        
        conn.commit()
        conn.close()
    
    def delete_video(self, video_id: str) -> bool:
        """
        X√≥a video kh·ªèi h·ªá th·ªëng l∆∞u tr·ªØ
        
        Args:
            video_id (str): ID video c·∫ßn x√≥a
            
        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng
        """
        try:
            video_info = self.get_video_info(video_id)
            if not video_info:
                return False
            
            # X√≥a files
            if os.path.exists(video_info.stored_path):
                os.remove(video_info.stored_path)
            
            if video_info.compressed_path and os.path.exists(video_info.compressed_path):
                os.remove(video_info.compressed_path)
            
            # X√≥a record trong database
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM videos WHERE id = ?', (video_id,))
            conn.commit()
            conn.close()
            
            print(f"‚úÖ ƒê√£ x√≥a video: {video_info.original_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a video {video_id}: {e}")
            return False
    
    def get_storage_stats(self) -> Dict:
        """L·∫•y th·ªëng k√™ h·ªá th·ªëng l∆∞u tr·ªØ"""
        videos = self.get_all_videos()
        
        total_videos = len(videos)
        total_size = sum(v.file_size_mb for v in videos)
        analyzed_videos = len([v for v in videos if v.status == "analyzed"])
        
        return {
            "total_videos": total_videos,
            "total_size_mb": total_size,
            "analyzed_videos": analyzed_videos,
            "storage_path": str(self.storage_root)
        }
    
    def cleanup_old_videos(self, days_old: int = 30):
        """
        D·ªçn d·∫πp video c≈©
        
        Args:
            days_old (int): X√≥a video c≈© h∆°n s·ªë ng√†y n√†y
        """
        from datetime import datetime, timedelta
        
        cutoff_date = datetime.now() - timedelta(days=days_old)
        videos = self.get_all_videos()
        
        deleted_count = 0
        for video in videos:
            upload_time = datetime.fromisoformat(video.upload_time)
            if upload_time < cutoff_date:
                if self.delete_video(video.id):
                    deleted_count += 1
        
        print(f"üßπ ƒê√£ d·ªçn d·∫πp {deleted_count} video c≈©")

class EnhancedVideoScriptGenerator:
    def __init__(self, api_key: str, claude_api_key: str, use_openrouter: bool = True, storage_root: str = "./video_storage"):
        """
        H·ªá th·ªëng t·∫°o k·ªãch b·∫£n n√¢ng cao v·ªõi storage v√† Claude cho voiceover.
        
        Args:
            api_key (str): Gemini API key
            claude_api_key (str): OpenRouter API key
            use_openrouter (bool): True ƒë·ªÉ d√πng OpenRouter
            storage_root (str): Th∆∞ m·ª•c l∆∞u tr·ªØ
        """
        self.storage = VideoStorageManager(storage_root)
        self.analyzer = OptimizedVideoAnalyzer(api_key)  # Gemini cho analyze video
        self.claude_api_key = claude_api_key
        self.use_openrouter = use_openrouter
        
        if self.use_openrouter:
            # C·∫•u h√¨nh cho OpenRouter v·ªõi OpenAI client phi√™n b·∫£n m·ªõi
            from openai import AsyncOpenAI, OpenAI
            import httpx
            
            self.claude_client = OpenAI(
                base_url="https://openrouter.ai/api/v1",
                api_key=self.claude_api_key,
                default_headers={
                    "HTTP-Referer": "https://github.com/AnhDT1704/Script-generare-demo-systerm",
                    "X-Title": "Video Analysis & Script Generator",
                    "User-Agent": "Script Generator Demo v1.0"
                },
                timeout=60.0  # TƒÉng timeout ƒë·ªÉ tr√°nh l·ªói timeout
            )
        else:
            from anthropic import Anthropic
            self.claude_client = Anthropic(api_key=self.claude_api_key)
    
    def process_video_uploads(self, uploaded_files: List[str]) -> List[str]:
        """
        X·ª≠ l√Ω danh s√°ch video upload
        
        Args:
            uploaded_files (List[str]): Danh s√°ch ƒë∆∞·ªùng d·∫´n video
            
        Returns:
            List[str]: Danh s√°ch video IDs
        """
        video_ids = []
        
        print("üìÅ ƒêang l∆∞u tr·ªØ videos...")
        for video_path in uploaded_files:
            try:
                video_id = self.storage.store_video(video_path)
                
                # N√©n video n·∫øu c·∫ßn
                self.storage.compress_and_store(video_id)
                
                video_ids.append(video_id)
                print(f"‚úÖ ƒê√£ l∆∞u tr·ªØ: {os.path.basename(video_path)} -> {video_id}")
                
            except Exception as e:
                print(f"‚ùå L·ªói l∆∞u tr·ªØ {os.path.basename(video_path)}: {e}")
        
        return video_ids
    
    def analyze_stored_videos(self, video_ids: List[str]) -> Dict[str, str]:
        """
        Ph√¢n t√≠ch c√°c video ƒë√£ l∆∞u tr·ªØ
        
        Args:
            video_ids (List[str]): Danh s√°ch video IDs
            
        Returns:
            Dict[str, str]: Map t·ª´ video_id ƒë·∫øn analysis result
        """
        results = {}
        
        print("ü§ñ ƒêang ph√¢n t√≠ch n·ªôi dung videos...")
        
        for video_id in video_ids:
            try:
                # L·∫•y ƒë∆∞·ªùng d·∫´n video t·ªëi ∆∞u
                video_path = self.storage.get_video_for_analysis(video_id)
                if not video_path:
                    continue
                
                # Ph√¢n t√≠ch n·ªôi dung
                analysis_result = self.analyzer.analyze_video_robust(video_path)
                
                # L∆∞u k·∫øt qu·∫£
                self.storage.update_analysis_result(video_id, analysis_result)
                results[video_id] = analysis_result
                
                print(f"‚úÖ ƒê√£ ph√¢n t√≠ch: {video_id}")
                
            except Exception as e:
                print(f"‚ùå L·ªói ph√¢n t√≠ch {video_id}: {e}")
                results[video_id] = f"C·∫£nh video cho s·ª± ki·ªán (ID: {video_id[:8]})"
        
        return results
    
    def generate_script_from_storage(self, video_ids: List[str], user_orders: Dict[str, int], 
                                   main_prompt: str, tone: str = "chuy√™n nghi·ªáp") -> str:
        """
        T·∫°o k·ªãch b·∫£n t·ª´ c√°c video ƒë√£ l∆∞u tr·ªØ
        
        Args:
            video_ids (List[str]): Danh s√°ch video IDs
            user_orders (Dict[str, int]): Th·ª© t·ª± do user ch·ªâ ƒë·ªãnh
            main_prompt (str): Prompt ch√≠nh
            tone (str): T√¥ng gi·ªçng
            
        Returns:
            str: K·ªãch b·∫£n ho√†n ch·ªânh
        """
        # L·∫•y th√¥ng tin videos
        video_infos = []
        for video_id in video_ids:
            info = self.storage.get_video_info(video_id)
            if info:
                video_infos.append(info)
        
        if not video_infos:
            return "‚ùå Kh√¥ng t√¨m th·∫•y video n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu k·ªãch b·∫£n"
        
        # Ph√¢n t√≠ch videos n·∫øu ch∆∞a c√≥
        for video_info in video_infos:
            if not video_info.analysis_result:
                print(f"üîÑ Ph√¢n t√≠ch video ch∆∞a c√≥ k·∫øt qu·∫£: {video_info.original_name}")
                video_path = self.storage.get_video_for_analysis(video_info.id)
                if video_path:
                    analysis = self.analyzer.analyze_video_robust(video_path)
                    self.storage.update_analysis_result(video_info.id, analysis)
                    video_info.analysis_result = analysis
        
        # T·∫°o k·ªãch b·∫£n
        script_content = self._generate_complete_script(video_infos, user_orders, main_prompt, tone)
        
        return script_content
    
    def _generate_complete_script(self, video_infos: List[VideoInfo], user_orders: Dict[str, int],
                                  main_prompt: str, tone: str) -> str:
        """T·∫°o k·ªãch b·∫£n ho√†n ch·ªânh, v·ªõi voiceover li√™n k·∫øt."""
        try:
            ordered_videos = self._sort_videos_by_order(video_infos, user_orders, main_prompt)
            
            script_parts = []
            previous_voiceover = ""  # ƒê·ªÉ li√™n k·∫øt c·∫£nh sau v·ªõi tr∆∞·ªõc
            
            for i, video_info in enumerate(ordered_videos):
                position = "opening" if i == 0 else ("ending" if i == len(ordered_videos)-1 else "middle")
                next_analysis = ordered_videos[i+1].analysis_result if i < len(ordered_videos)-1 else ""
                
                voiceover = self._generate_voiceover_for_scene(
                    video_info, main_prompt, tone, position, previous_voiceover, next_analysis
                )
                
                script_parts.append({
                    "scene_number": i + 1,
                    "video_file": video_info.original_name,
                    "duration": video_info.duration,
                    "description": self._extract_background_description(video_info.analysis_result or "N·ªôi dung video ch∆∞a ƒë∆∞·ª£c ph√¢n t√≠ch"),
                    "voiceover": voiceover
                })
                
                previous_voiceover = voiceover  # C·∫≠p nh·∫≠t cho c·∫£nh sau
            
            total_duration = sum(v.duration for v in ordered_videos)
            return self._format_final_script(script_parts, main_prompt, total_duration)
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o k·ªãch b·∫£n: {e}")
            return f"‚ùå Kh√¥ng th·ªÉ t·∫°o k·ªãch b·∫£n: {e}"
    
    def _extract_background_description(self, analysis_result: str) -> str:
        """Tr√≠ch xu·∫•t ch·ªâ ph·∫ßn 'B·ªëi c·∫£nh, m√¥i tr∆∞·ªùng ch√≠nh' t·ª´ analysis_result s·ª≠ d·ª•ng regex."""
        try:
            # S·ª≠ d·ª•ng regex ƒë·ªÉ t√¨m ph·∫ßn 1. B·ªëi c·∫£nh, m√¥i tr∆∞·ªùng ch√≠nh: v√† l·∫•y ƒë·∫øn tr∆∞·ªõc ph·∫ßn 2.
            pattern = r"1\.\s*\*\*?B·ªëi c·∫£nh, m√¥i tr∆∞·ªùng ch√≠nh:\*\*?\s*(.*?)(?=\n\s*2\.|$)"
            match = re.search(pattern, analysis_result, re.DOTALL | re.IGNORECASE)
            if match:
                return match.group(1).strip()
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ m√¥ t·∫£ m·∫∑c ƒë·ªãnh ho·∫∑c h·∫øt chu·ªói
                return analysis_result.strip()
        except Exception as e:
            print(f"L·ªói tr√≠ch xu·∫•t m√¥ t·∫£: {e}")
            return analysis_result.strip()
    
    def _sort_videos_by_order(self, video_infos: List[VideoInfo], user_orders: Dict[str, int], 
                              main_prompt: str) -> List[VideoInfo]:
        """S·∫Øp x·∫øp video theo th·ª© t·ª±, t·ª± ƒë·ªÅ xu·∫•t n·∫øu kh√¥ng c√≥ user_orders"""
        # N·∫øu c√≥ user_orders, s·∫Øp x·∫øp theo ƒë√≥
        if user_orders:
            ordered_videos = []
            unordered_videos = []
            
            for video_info in video_infos:
                if video_info.original_name in user_orders:
                    ordered_videos.append((user_orders[video_info.original_name], video_info))
                else:
                    unordered_videos.append(video_info)
            
            # S·∫Øp x·∫øp videos c√≥ th·ª© t·ª±
            ordered_videos.sort(key=lambda x: x[0])
            ordered_video_infos = [v[1] for v in ordered_videos]
            
            # Th√™m videos ch∆∞a c√≥ th·ª© t·ª± v√†o cu·ªëi
            return ordered_video_infos + unordered_videos
        
        # N·∫øu kh√¥ng c√≥ user_orders, d√πng Gemini ƒë·ªÉ ƒë·ªÅ xu·∫•t th·ª© t·ª±
        else:
            print("üîÑ Kh√¥ng c√≥ th·ª© t·ª± ng∆∞·ªùi d√πng, ƒëang ƒë·ªÅ xu·∫•t th·ª© t·ª± t·ª± ƒë·ªông b·∫±ng Gemini...")
            return self._suggest_order_with_gemini(video_infos, main_prompt)
    
    def _suggest_order_with_gemini(self, video_infos: List[VideoInfo], main_prompt: str) -> List[VideoInfo]:
        """D√πng Gemini ƒë·ªÉ ƒë·ªÅ xu·∫•t th·ª© t·ª± video d·ª±a tr√™n analysis v√† main_prompt"""
        try:
            # Chu·∫©n b·ªã danh s√°ch m√¥ t·∫£
            descriptions = []
            for info in video_infos:
                desc = f"{info.original_name}: {info.analysis_result or 'Ch∆∞a ph√¢n t√≠ch'}"
                descriptions.append(desc)
            
            descriptions_str = "\n".join(descriptions)
            
            prompt = f"""
            D·ª±a tr√™n ch·ªß ƒë·ªÅ k·ªãch b·∫£n: "{main_prompt}"
            V√† m√¥ t·∫£ c√°c c·∫£nh video sau:
            {descriptions_str}
            
            ƒê·ªÅ xu·∫•t th·ª© t·ª± logic cho c√°c c·∫£nh ƒë·ªÉ t·∫°o k·ªãch b·∫£n m·∫°ch l·∫°c (v√≠ d·ª•: b·∫Øt ƒë·∫ßu t·ª´ gi·ªõi thi·ªáu, ph√°t tri·ªÉn, k·∫øt th√∫c).
            Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng danh s√°ch th·ª© t·ª±: 1: t√™n_file1.mp4, 2: t√™n_file2.mp4, ...
            Ch·ªâ tr·∫£ v·ªÅ danh s√°ch n√†y, kh√¥ng th√™m gi·∫£i th√≠ch.
            """
            
            response = self.analyzer.model.generate_content(prompt)
            if not response or not response.text:
                raise Exception("Gemini kh√¥ng tr·∫£ v·ªÅ g·ª£i √Ω th·ª© t·ª±")
            
            # Parse k·∫øt qu·∫£ (gi·∫£ s·ª≠ format nh∆∞ "1: file1.mp4\n2: file2.mp4")
            suggested_order = {}
            for line in response.text.strip().split("\n"):
                if ":" in line:
                    order_str, filename = line.split(":", 1)
                    try:
                        order = int(order_str.strip())
                        suggested_order[filename.strip()] = order
                    except ValueError:
                        continue
            
            # S·∫Øp x·∫øp d·ª±a tr√™n suggested_order
            ordered_videos = []
            unordered_videos = []
            
            for video_info in video_infos:
                if video_info.original_name in suggested_order:
                    ordered_videos.append((suggested_order[video_info.original_name], video_info))
                else:
                    unordered_videos.append(video_info)
            
            ordered_videos.sort(key=lambda x: x[0])
            ordered_video_infos = [v[1] for v in ordered_videos]
            
            print("‚úÖ ƒê√£ ƒë·ªÅ xu·∫•t th·ª© t·ª± t·ª± ƒë·ªông")
            return ordered_video_infos + unordered_videos
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªÅ xu·∫•t th·ª© t·ª±: {e}. S·ª≠ d·ª•ng th·ª© t·ª± m·∫∑c ƒë·ªãnh.")
            return video_infos  # Fallback v·ªÅ th·ª© t·ª± g·ªëc
    
    def _generate_voiceover_for_scene(self, video_info: VideoInfo, main_prompt: str, 
                                      tone: str, position: str, previous_voiceover: str = "", next_analysis: str = "") -> str:
        """T·∫°o voiceover d√πng Claude cho ch·∫•t l∆∞·ª£ng cao h∆°n, v·ªõi li√™n k·∫øt c·∫£nh."""
        # Comment ho·∫∑c x√≥a d√≤ng t√≠nh max_words
        # max_words = int(video_info.duration * 150 / 60)  # ~150 t·ª´/ph√∫t
        
        # Prompt chi ti·∫øt ƒë·ªÉ Claude t·∫°o voiceover hay, li√™n k·∫øt t·ªët, chung chung cho m·ªçi ch·ªß ƒë·ªÅ
        prompt = f"""
        B·∫°n l√† m·ªôt bi√™n k·ªãch chuy√™n nghi·ªáp, t·∫°o voiceover script cho video d·ª±a tr√™n prompt ng∆∞·ªùi d√πng. ƒê·∫£m b·∫£o voiceover:
        - H·∫•p d·∫´n, t·ª± nhi√™n nh∆∞ k·ªÉ chuy·ªán, s·ª≠ d·ª•ng ng√¥n ng·ªØ ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ.
        - N·ªôi dung voiceover b·∫°n t·∫°o ra ph·∫£i b√°m s√°t v·ªõi n·ªôi dung h√¨nh ·∫£nh tr√™n video, kh√¥ng ƒë∆∞·ª£c l√†m th√¥ng tin voiceover script sai l·ªách s·ª± th·∫≠t
        - Li√™n k·∫øt m∆∞·ª£t m√† v·ªõi c·∫£nh tr∆∞·ªõc (ti·∫øp n·ªëi √Ω t·ª´ voiceover tr∆∞·ªõc) v√† d·∫´n d·∫Øt sang c·∫£nh sau (d·ª±a tr√™n m√¥ t·∫£ c·∫£nh sau).
        - Tone: {tone}
        - V·ªã tr√≠ c·∫£nh: {position} (opening: gi·ªõi thi·ªáu, middle: ph√°t tri·ªÉn, ending: k·∫øt th√∫c).
        - Ch·ªß ƒë·ªÅ t·ªïng: {main_prompt}
        - M√¥ t·∫£ c·∫£nh hi·ªán t·∫°i: {video_info.analysis_result}
        - Voiceover c·∫£nh tr∆∞·ªõc (n·∫øu c√≥, ti·∫øp n·ªëi √Ω): {previous_voiceover}
        - M√¥ t·∫£ c·∫£nh sau (n·∫øu c√≥, d·∫´n d·∫Øt sang): {next_analysis}
        
        Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung voiceover thu·∫ßn t√∫y, kh√¥ng th√™m gi·∫£i th√≠ch.
        """
            
        try:
            if self.use_openrouter:
                # G·ªçi qua OpenRouter v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
                completion = self.claude_client.chat.completions.create(
                    model="anthropic/claude-3.5-sonnet",  # C·∫≠p nh·∫≠t model ƒë√∫ng
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=800,
                    temperature=0.7
                )
                response = completion.choices[0].message.content.strip()
            else:
                # G·ªçi tr·ª±c ti·∫øp Anthropic v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
                message = self.claude_client.messages.create(
                    model="anthropic/claude-3.5-sonnet",  # C·∫≠p nh·∫≠t model ƒë√∫ng
                    max_tokens=800,
                    temperature=0.7,
                    messages=[{"role": "user", "content": prompt}]
                )
                response = message.content[0].text.strip()
            
            if not response:
                raise Exception("Claude tr·∫£ v·ªÅ k·∫øt qu·∫£ r·ªóng")
                
            return response
            
        except Exception as e:
            error_details = f"L·ªói t·∫°o voiceover v·ªõi Claude: {str(e)}"
            print(error_details)
            
            # Log l·ªói ƒë·ªÉ debug
            with open("voiceover_errors.log", "a", encoding="utf-8") as f:
                f.write(f"\n[{datetime.now()}] Error Details: {error_details}")
                f.write(f"\n[{datetime.now()}] Prompt: {prompt}")
                f.write(f"\n[{datetime.now()}] Video Info: {video_info.original_name}\n")
            
            # Th·ª≠ l·∫°i v·ªõi prompt ƒë∆°n gi·∫£n h∆°n
            try:
                simplified_prompt = f"""
                T·∫°o voiceover ng·∫Øn g·ªçn cho video n√†y. Tone: {tone}. 
                N·ªôi dung video: {video_info.analysis_result}
                """
                
                if self.use_openrouter:
                    completion = self.claude_client.chat.completions.create(
                        model="anthropic/claude-3.5-sonnet",  # C·∫≠p nh·∫≠t model ƒë√∫ng
                        messages=[{"role": "user", "content": simplified_prompt}],
                        max_tokens=800,
                        temperature=0.7
                    )
                    return completion.choices[0].message.content.strip()
                else:
                    message = self.claude_client.messages.create(
                        model="claude-3-5-sonnet-20240620",
                        max_tokens=800,
                        temperature=0.7,
                        messages=[{"role": "user", "content": simplified_prompt}]
                    )
                    return message.content[0].text.strip()
                    
            except Exception as retry_error:
                print(f"L·ªói th·ª≠ l·∫°i v·ªõi Claude: {str(retry_error)}")
                # Log l·ªói th·ª≠ l·∫°i
                with open("voiceover_errors.log", "a", encoding="utf-8") as f:
                    f.write(f"\n[{datetime.now()}] Retry Error: {str(retry_error)}\n")
                
                return f"[Voiceover cho {video_info.original_name}] (L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Claude. Vui l√≤ng th·ª≠ l·∫°i sau.)"
            
            # Th·ª≠ backup v·ªõi model kh√°c
            try:
                # Fallback to GPT model
                backup_prompt = f"T·∫°o voiceover ng·∫Øn g·ªçn cho video d·ª±a tr√™n: {video_info.analysis_result}"
                backup_completion = self.openai_client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": backup_prompt}],
                    max_tokens=200,
                    temperature=0.7
                )
                return backup_completion.choices[0].message.content.strip()
            except Exception as backup_error:
                print(f"L·ªói backup model: {str(backup_error)}")
                # L∆∞u l·ªói ƒë·ªÉ debug
                with open("voiceover_errors.log", "a") as f:
                    f.write(f"\n[{datetime.now()}] Primary Error: {error_details}")
                    f.write(f"\n[{datetime.now()}] Backup Error: {str(backup_error)}\n")
                return f"[Voiceover cho {video_info.original_name}] (L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Claude. Vui l√≤ng th·ª≠ l·∫°i sau.)"
    
    def _edit_script(self, current_script: str, edit_prompt: str, main_prompt: str, tone: str) -> str:
        """Ch·ªânh s·ª≠a k·ªãch b·∫£n d·ª±a tr√™n y√™u c·∫ßu ng∆∞·ªùi d√πng d√πng Claude."""
        try:
            prompt = f"""
            B·∫°n l√† bi√™n k·ªãch chuy√™n nghi·ªáp. D·ª±a tr√™n k·ªãch b·∫£n hi·ªán t·∫°i sau:
            
            {current_script}
            
            V√† y√™u c·∫ßu ch·ªânh s·ª≠a t·ª´ ng∆∞·ªùi d√πng: "{edit_prompt}"
            
            H√£y t·∫°o k·ªãch b·∫£n m·ªõi ƒë√£ ch·ªânh s·ª≠a, gi·ªØ nguy√™n format ch√≠nh x√°c (ti√™u ƒë·ªÅ, C·∫£nh X, Video, Th·ªùi l∆∞·ª£ng, H√¨nh ·∫£nh, Voiceover).
            Gi·ªØ ch·ªß ƒë·ªÅ t·ªïng: {main_prompt}
            Tone: {tone}
            
            Ch·ªâ tr·∫£ v·ªÅ k·ªãch b·∫£n m·ªõi ho√†n ch·ªânh, kh√¥ng th√™m gi·∫£i th√≠ch.
            """
            
            message = self.claude_client.messages.create(
                model="claude-3",
                max_tokens=2000,
                temperature=0.7,
                messages=[{"role": "user", "content": prompt}]
            )
            return message.content[0].text.strip()
            
        except Exception as e:
            print(f"L·ªói ch·ªânh s·ª≠a k·ªãch b·∫£n: {e}")
            return current_script  # Fallback gi·ªØ nguy√™n
    

    
    def _format_final_script(self, script_parts: List[Dict], main_prompt: str, total_duration: float) -> str:
        """Format k·ªãch b·∫£n cu·ªëi c√πng"""
        # L√†m ti√™u ƒë·ªÅ ƒë·ªông d·ª±a tr√™n main_prompt
        title = main_prompt.upper() if main_prompt else "K·ªäCH B·∫¢N VIDEO"
        output = f"{title} (C√ì TH·ªúI L∆Ø·ª¢NG V√Ä VOICEOVER ƒê·∫¶Y ƒê·ª¶)\n\n"
        
        for part in script_parts:
            # L·ªçc ch·ªâ l·∫•y th√¥ng tin b·ªëi c·∫£nh v√† ho·∫°t ƒë·ªông ch√≠nh
            lines = part['description'].split('\n')
            context_line = next((line for line in lines if line.startswith('1.')), '')
            action_line = next((line for line in lines if line.startswith('3.')), '')
            filtered_description = '\n'.join(line for line in [context_line, action_line] if line)
            
            output += f"""C·∫£nh {part['scene_number']}
(Video: {part['video_file']})
Th·ªùi l∆∞·ª£ng: {part['duration']:.0f} gi√¢y
H√¨nh ·∫£nh:
{filtered_description}

Voiceover:
"{part['voiceover']}"

"""
        
        output += "(K·∫øt th√∫c video v·ªõi logo ho·∫∑c th√¥ng tin li√™n h·ªá)\n\n---K·∫æT TH√öC K·ªäCH B·∫¢N---"
        return output
    
    def cleanup(self):
        """D·ªçn d·∫πp resources"""
        self.analyzer.cleanup()

# Demo usage
def demo_storage_system():
    """Demo h·ªá th·ªëng l∆∞u tr·ªØ"""
    print("üè™ DEMO H·ªÜ TH·ªêNG L·ªÆU TR·ªÆ VIDEO")
    print("="*40)
    
    api_key = input("Nh·∫≠p Gemini API key: ")
    claude_api_key = input("Nh·∫≠p Claude/OpenRouter API key: ")
    use_openrouter = input("S·ª≠ d·ª•ng OpenRouter? (y/n): ").strip().lower() == 'y'
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    generator = EnhancedVideoScriptGenerator(api_key, claude_api_key, use_openrouter, "./demo_storage")
    
    # Hi·ªÉn th·ªã stats
    stats = generator.storage.get_storage_stats()
    print(f"\nüìä Th·ªëng k√™ l∆∞u tr·ªØ:")
    print(f"   T·ªïng videos: {stats['total_videos']}")
    print(f"   Dung l∆∞·ª£ng: {stats['total_size_mb']:.1f}MB")
    print(f"   ƒê√£ ph√¢n t√≠ch: {stats['analyzed_videos']}")
    
    # L·∫•y danh s√°ch videos c√≥ s·∫µn
    existing_videos = generator.storage.get_all_videos()
    if existing_videos:
        print(f"\nüìπ Videos ƒë√£ l∆∞u tr·ªØ:")
        for video in existing_videos[:5]:  # Hi·ªÉn th·ªã 5 video g·∫ßn nh·∫•t
            print(f"   ‚Ä¢ {video.original_name} ({video.duration:.1f}s) - {video.status}")
    
    # Upload videos m·ªõi
    upload_choice = input("\nB·∫°n c√≥ mu·ªën upload videos m·ªõi? (y/n): ").strip().lower()
    if upload_choice == 'y':
        video_folder = input("ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a videos: ")
        
        if os.path.exists(video_folder):
            video_files = []
            for file in os.listdir(video_folder):
                if file.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                    video_files.append(os.path.join(video_folder, file))
            
            if video_files:
                print(f"T√¨m th·∫•y {len(video_files)} videos")
                video_ids = generator.process_video_uploads(video_files)
                
                # T·∫°o k·ªãch b·∫£n demo - Ng∆∞·ªùi d√πng c√≥ th·ªÉ thay main_prompt
                main_prompt = input("Nh·∫≠p prompt ch·ªß ƒë·ªÅ k·ªãch b·∫£n (v√≠ d·ª•: T·∫°o video gi·ªõi thi·ªáu s·ª± ki·ªán): ")
                tone = input("Nh·∫≠p m√¥ t·∫£ t√¥ng voiceover (v√≠ d·ª•: Nhi·ªát huy·∫øt, truy·ªÅn c·∫£m h·ª©ng, nghi√™m t√∫c, chuy√™n nghi·ªáp, h∆∞·ªõng t·ªõi ƒë·ªëi t∆∞·ª£ng tr·∫ª em): ") or "chuy√™n nghi·ªáp"
                # Gi·∫£ s·ª≠ kh√¥ng c√≥ user_orders ƒë·ªÉ test t·ª± ƒë·ªông s·∫Øp x·∫øp
                script = generator.generate_script_from_storage(video_ids, {}, main_prompt, tone)
                
                print("\nüìù K·ªäCH B·∫¢N ƒê√É T·∫†O:")
                print("="*40)
                print(script)
                
                # Ch·ª©c nƒÉng ch·ªânh s·ª≠a
                while True:
                    edit_choice = input("\nB·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a k·ªãch b·∫£n? (y/n): ").strip().lower()
                    if edit_choice != 'y':
                        break
                    
                    edit_prompt = input("Nh·∫≠p y√™u c·∫ßu ch·ªânh s·ª≠a (v√≠ d·ª•: L√†m voiceover c·∫£nh 1 d√†i h∆°n): ")
                    script = generator._edit_script(script, edit_prompt, main_prompt, tone)
                    
                    print("\nüìù K·ªäCH B·∫¢N SAU CH·ªàNH S·ª¨A:")
                    print("="*40)
                    print(script)
    
    generator.cleanup()

if __name__ == "__main__":
    demo_storage_system()