import streamlit as st
import os
import tempfile
import json
from datetime import datetime
import pandas as pd
from pathlib import Path
import shutil
from dotenv import load_dotenv

# Load config from environment or streamlit secrets
def get_config():
    try:
        # ∆Øu ti√™n s·ª≠ d·ª•ng streamlit secrets
        return {
            "GEMINI_API_KEY": st.secrets["GEMINI_API_KEY"],
            "CLAUDE_API_KEY": st.secrets["CLAUDE_API_KEY"],
            "USE_OPENROUTER": st.secrets.get("USE_OPENROUTER", False)
        }
    except Exception as e:
        # Fallback to .env if exists
        if os.path.exists(".env"):
            load_dotenv()
            return {
                "GEMINI_API_KEY": os.getenv("GEMINI_API_KEY"),
                "CLAUDE_API_KEY": os.getenv("CLAUDE_API_KEY"),
                "USE_OPENROUTER": os.getenv("USE_OPENROUTER", "false").lower() == "true"
            }
        else:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y API keys. Vui l√≤ng th√™m keys v√†o .streamlit/secrets.toml")
            st.stop()

# Import t·ª´ file g·ªëc
try:
    from .grok_VU import EnhancedVideoScriptGenerator, VideoStorageManager, OptimizedVideoAnalyzer
except ImportError:
    try:
        from grok_VU import EnhancedVideoScriptGenerator, VideoStorageManager, OptimizedVideoAnalyzer
    except ImportError:
        st.error("Kh√¥ng th·ªÉ import grok_VU.py. H√£y ƒë·∫£m b·∫£o file grok_VU.py ·ªü c√πng th∆∞ m·ª•c v·ªõi app n√†y.")
        st.stop()

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Video Analysis & Script Generator",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS - Fix cho c√°c √¥ tr·∫Øng che ch·ªØ
st.markdown("""
<style>
    /* Reset container styling */
    .main > div {
        padding-top: 1rem;
    }
    
    /* Header styling */
    .main-header {
        color: #2E86AB;
        text-align: center;
        padding: 10px 0;
        border-bottom: 2px solid #2E86AB;
        margin-bottom: 20px;
        background: transparent !important;
    }
    
    /* Video card styling - lo·∫°i b·ªè background c√≥ th·ªÉ g√¢y che ch·ªØ */
    .video-card {
        background: rgba(248, 249, 250, 0.8) !important;
        padding: 12px;
        border-radius: 8px;
        border-left: 4px solid #2E86AB;
        margin: 8px 0;
        backdrop-filter: none;
    }
    
    /* Stat metrics - ƒë·∫£m b·∫£o kh√¥ng che ch·ªØ */
    .stat-metric {
        background: linear-gradient(90deg, #2E86AB, #A23B72);
        color: white !important;
        padding: 12px;
        border-radius: 8px;
        text-align: center;
        margin: 8px 0;
        position: relative;
        z-index: 1;
    }
    
    /* Fix cho Streamlit containers */
    .stContainer {
        background: transparent !important;
    }
    
    /* Fix cho expander */
    .streamlit-expanderHeader {
        background: transparent !important;
    }
    
    /* Fix cho columns */
    .row-widget {
        background: transparent !important;
    }
    
    /* ƒê·∫£m b·∫£o text kh√¥ng b·ªã che */
    .stMarkdown, .stText {
        background: transparent !important;
        z-index: 10;
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'initialized' not in st.session_state:
    st.session_state.initialized = False
    st.session_state.generator = None
    st.session_state.uploaded_videos = []
    st.session_state.current_script = ""

def initialize_system():
    """Kh·ªüi t·∫°o h·ªá th·ªëng v·ªõi API keys"""
    if not st.session_state.initialized:
        try:
            config = get_config()
            st.session_state.generator = EnhancedVideoScriptGenerator(
                api_key=config["GEMINI_API_KEY"],
                claude_api_key=config["CLAUDE_API_KEY"],
                use_openrouter=config["USE_OPENROUTER"],
                storage_root="./streamlit_video_storage"
            )
            st.session_state.initialized = True
            return True
        except Exception as e:
            st.error(f"‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng: {str(e)}")
            return False
    return st.session_state.initialized

def main():
    # Header
    st.markdown('<h1 class="main-header">üé¨ Video Analysis & Script Generator</h1>', 
                unsafe_allow_html=True)
    
    # Sidebar - C·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # Checkbox cho OpenRouter
        use_openrouter = st.checkbox("S·ª≠ d·ª•ng OpenRouter", 
                                    value=st.session_state.get('use_openrouter', True))
        
        # L∆∞u v√†o session state
        st.session_state.use_openrouter = use_openrouter
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        if st.button("üîó Ki·ªÉm tra k·∫øt n·ªëi"):
            if initialize_system():
                st.success("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
            else:
                st.error("‚ùå L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra file .env")
    
    # Main interface
    if not initialize_system():
        st.info("‚ùå Vui l√≤ng ki·ªÉm tra file .env v√† ƒë·∫£m b·∫£o c√°c API keys h·ª£p l·ªá")
        return
    
    # Tabs ch√≠nh
    tab1, tab2, tab3, tab4 = st.tabs(["üì§ Upload Videos", "üìä Qu·∫£n l√Ω Videos", "‚ú® T·∫°o Script", "üìã Xem Scripts"])
    
    with tab1:
        upload_interface()
    
    with tab2:
        video_management_interface()
    
    with tab3:
        script_generation_interface()
    
    with tab4:
        script_history_interface()

def upload_interface():
    """Giao di·ªán upload videos"""
    st.header("üì§ Upload & Ph√¢n t√≠ch Videos")
    
    # File uploader
    uploaded_files = st.file_uploader(
        "Ch·ªçn video files", 
        type=['mp4', 'avi', 'mov', 'mkv'],
        accept_multiple_files=True,
        help="H·ªó tr·ª£: MP4, AVI, MOV, MKV. T·ªëi ƒëa 20MB/file ƒë·ªÉ ph√¢n t√≠ch tr·ª±c ti·∫øp."
    )
    
    if uploaded_files:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader(f"üìπ {len(uploaded_files)} video(s) ƒë∆∞·ª£c ch·ªçn:")
            for file in uploaded_files:
                file_size_mb = len(file.getvalue()) / (1024 * 1024)
                st.markdown(f"""
                <div class="video-card">
                    <strong>{file.name}</strong><br>
                    üìè K√≠ch th∆∞·ªõc: {file_size_mb:.1f}MB<br>
                    üéØ Tr·∫°ng th√°i: {'‚úÖ Ph√π h·ª£p' if file_size_mb <= 50 else '‚ö†Ô∏è C√≥ th·ªÉ qu√° l·ªõn'}
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            if st.button("üöÄ Upload & Ph√¢n t√≠ch", type="primary"):
                upload_and_analyze_videos(uploaded_files)

def upload_and_analyze_videos(uploaded_files):
    """X·ª≠ l√Ω upload v√† ph√¢n t√≠ch videos"""
    if not st.session_state.generator:
        st.error("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # T·∫°o th∆∞ m·ª•c t·∫°m
        temp_dir = tempfile.mkdtemp()
        video_paths = []
        
        # L∆∞u files t·∫°m th·ªùi
        for i, uploaded_file in enumerate(uploaded_files):
            status_text.text(f"ƒêang l∆∞u file {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
            
            temp_path = os.path.join(temp_dir, uploaded_file.name)
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getvalue())
            video_paths.append(temp_path)
            
            progress_bar.progress((i + 1) / (len(uploaded_files) * 2))
        
        # X·ª≠ l√Ω videos
        status_text.text("ƒêang l∆∞u tr·ªØ v√† ph√¢n t√≠ch videos...")
        video_ids = st.session_state.generator.process_video_uploads(video_paths)
        
        # Ph√¢n t√≠ch n·ªôi dung
        analysis_results = st.session_state.generator.analyze_stored_videos(video_ids)
        
        progress_bar.progress(1.0)
        status_text.text("‚úÖ Ho√†n th√†nh!")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.success(f"‚úÖ ƒê√£ upload v√† ph√¢n t√≠ch {len(video_ids)} videos th√†nh c√¥ng!")
        
        for video_id in video_ids:
            video_info = st.session_state.generator.storage.get_video_info(video_id)
            if video_info:
                with st.expander(f"üìπ {video_info.original_name}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**Th·ªùi l∆∞·ª£ng:** {video_info.duration:.1f}s")
                        st.write(f"**K√≠ch th∆∞·ªõc:** {video_info.file_size_mb:.1f}MB")
                        st.write(f"**ƒê·ªô ph√¢n gi·∫£i:** {video_info.width}x{video_info.height}")
                    with col2:
                        st.write(f"**Tr·∫°ng th√°i:** {video_info.status}")
                        st.write(f"**ID:** {video_info.id}")
                    
                    if video_info.analysis_result:
                        st.write("**üìù Ph√¢n t√≠ch n·ªôi dung:**")
                        st.info(video_info.analysis_result)
        
        # Cleanup
        shutil.rmtree(temp_dir)
        
    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
        progress_bar.empty()
        status_text.empty()

def video_management_interface():
    """Giao di·ªán qu·∫£n l√Ω videos"""
    st.header("üìä Qu·∫£n l√Ω Videos")
    
    if not st.session_state.generator:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return
    
    # Th·ªëng k√™ t·ªïng quan
    stats = st.session_state.generator.storage.get_storage_stats()
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown(f"""
        <div class="stat-metric">
            <h3>{stats['total_videos']}</h3>
            <p>T·ªïng videos</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="stat-metric">
            <h3>{stats['total_size_mb']:.1f}MB</h3>
            <p>Dung l∆∞·ª£ng</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="stat-metric">
            <h3>{stats['analyzed_videos']}</h3>
            <p>ƒê√£ ph√¢n t√≠ch</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        if st.button("üîÑ Refresh"):
            st.rerun()
    
    # Danh s√°ch videos
    videos = st.session_state.generator.storage.get_all_videos()
    
    if videos:
        st.subheader("üìπ Danh s√°ch Videos")
        
        # T·∫°o DataFrame
        video_data = []
        for video in videos:
            video_data.append({
                "T√™n file": video.original_name,
                "ID": video.id[:8] + "...",
                "Th·ªùi l∆∞·ª£ng (s)": f"{video.duration:.1f}",
                "K√≠ch th∆∞·ªõc (MB)": f"{video.file_size_mb:.1f}",
                "Tr·∫°ng th√°i": video.status,
                "Upload time": video.upload_time[:19],
                "ƒê√£ ph√¢n t√≠ch": "‚úÖ" if video.analysis_result else "‚ùå"
            })
        
        df = pd.DataFrame(video_data)
        st.dataframe(df, use_container_width=True)
        
        # Chi ti·∫øt video ƒë∆∞·ª£c ch·ªçn
        selected_video_name = st.selectbox(
            "Ch·ªçn video ƒë·ªÉ xem chi ti·∫øt:",
            options=[v.original_name for v in videos],
            index=0
        )
        
        if selected_video_name:
            selected_video = next(v for v in videos if v.original_name == selected_video_name)
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.subheader("üìã Chi ti·∫øt Video")
                st.write(f"**T√™n g·ªëc:** {selected_video.original_name}")
                st.write(f"**ID:** {selected_video.id}")
                st.write(f"**Th·ªùi l∆∞·ª£ng:** {selected_video.duration:.1f} gi√¢y")
                st.write(f"**ƒê·ªô ph√¢n gi·∫£i:** {selected_video.width}x{selected_video.height}")
                st.write(f"**K√≠ch th∆∞·ªõc:** {selected_video.file_size_mb:.1f}MB")
                st.write(f"**Tr·∫°ng th√°i:** {selected_video.status}")
                st.write(f"**Upload:** {selected_video.upload_time}")
                
                if selected_video.analysis_result:
                    st.subheader("üîç K·∫øt qu·∫£ ph√¢n t√≠ch")
                    st.info(selected_video.analysis_result)
                else:
                    st.warning("Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch")
            
            with col2:
                st.subheader("üõ†Ô∏è Thao t√°c")
                
                # Ph√¢n t√≠ch l·∫°i
                if st.button("üîÑ Ph√¢n t√≠ch l·∫°i", key=f"analyze_{selected_video.id}"):
                    analyze_single_video(selected_video.id)
                
                # N√©n video
                if st.button("üóúÔ∏è N√©n video", key=f"compress_{selected_video.id}"):
                    compress_single_video(selected_video.id)
                
                # X√≥a video
                if st.button("üóëÔ∏è X√≥a video", key=f"delete_{selected_video.id}", type="secondary"):
                    delete_single_video(selected_video.id)
        
        # D·ªçn d·∫πp h√†ng lo·∫°t
        st.subheader("üßπ D·ªçn d·∫πp h√†ng lo·∫°t")
        col1, col2 = st.columns(2)
        
        with col1:
            days_old = st.number_input("X√≥a videos c≈© h∆°n (ng√†y):", min_value=1, value=30)
            if st.button("üßπ D·ªçn d·∫πp videos c≈©"):
                cleanup_old_videos(days_old)
        
        with col2:
            if st.button("üìä Ph√¢n t√≠ch t·∫•t c·∫£ videos ch∆∞a x·ª≠ l√Ω"):
                analyze_all_unprocessed()
    
    else:
        st.info("üì≠ Ch∆∞a c√≥ video n√†o. H√£y upload videos ·ªü tab ƒë·∫ßu ti√™n.")

def script_generation_interface():
    """Giao di·ªán t·∫°o script"""
    st.header("‚ú® T·∫°o Script Video")
    
    if not st.session_state.generator:
        st.warning("H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
        return
    
    # L·∫•y danh s√°ch videos
    videos = st.session_state.generator.storage.get_all_videos()
    
    if not videos:
        st.info("üì≠ Ch∆∞a c√≥ video n√†o. H√£y upload videos tr∆∞·ªõc.")
        return
    
    # Ch·ªçn videos ƒë·ªÉ t·∫°o script
    st.subheader("üìã Ch·ªçn videos cho script")
    
    selected_video_names = st.multiselect(
        "Ch·ªçn videos:",
        options=[v.original_name for v in videos],
        default=[v.original_name for v in videos[:3]]  # M·∫∑c ƒë·ªãnh ch·ªçn 3 video ƒë·∫ßu
    )
    
    if selected_video_names:
        selected_videos = [v for v in videos if v.original_name in selected_video_names]
        
        # S·∫Øp x·∫øp th·ª© t·ª±
        st.subheader("üî¢ S·∫Øp x·∫øp th·ª© t·ª± c·∫£nh")
        
        use_custom_order = st.checkbox("T·ª± s·∫Øp x·∫øp th·ª© t·ª± (kh√¥ng check = AI t·ª± ƒë·ªông s·∫Øp x·∫øp)")
        
        user_orders = {}
        if use_custom_order:
            for video_name in selected_video_names:
                order = st.number_input(
                    f"Th·ª© t·ª± cho {video_name}:",
                    min_value=1,
                    max_value=len(selected_video_names),
                    value=selected_video_names.index(video_name) + 1,
                    key=f"order_{video_name}"
                )
                user_orders[video_name] = order
        
        # C·∫•u h√¨nh script
        st.subheader("üìù C·∫•u h√¨nh Script")
        
        col1, col2 = st.columns(2)
        
        with col1:
            main_prompt = st.text_area(
                "Ch·ªß ƒë·ªÅ script (prompt ch√≠nh):",
                value="T·∫°o video gi·ªõi thi·ªáu s·ª± ki·ªán chuy√™n nghi·ªáp",
                height=100,
                help="M√¥ t·∫£ ch·ªß ƒë·ªÅ, m·ª•c ƒë√≠ch c·ªßa video script"
            )
        
        with col2:
            tone = st.text_input(
                "Tone/Gi·ªçng ƒëi·ªáu:",
                value="chuy√™n nghi·ªáp",
                placeholder="Nh·∫≠p m√¥ t·∫£ tone (v√≠ d·ª•: Nhi·ªát huy·∫øt, truy·ªÅn c·∫£m h·ª©ng, nghi√™m t√∫c, chuy√™n nghi·ªáp, h∆∞·ªõng t·ªõi ƒë·ªëi t∆∞·ª£ng tr·∫ª em)",
                help="M√¥ t·∫£ chi ti·∫øt tone voiceover m√† b·∫°n mong mu·ªën. H·ªá th·ªëng s·∫Ω truy·ªÅn tr·ª±c ti·∫øp v√†o model AI."
            )
            
            preview_mode = st.checkbox("Ch·∫ø ƒë·ªô preview (nhanh h∆°n)")
        
        # T·∫°o script
        if st.button("üé¨ T·∫°o Script", type="primary"):
            generate_script(selected_videos, user_orders, main_prompt, tone, preview_mode)
    
    # Hi·ªÉn th·ªã script hi·ªán t·∫°i
    if st.session_state.current_script:
        st.subheader("üìú Script hi·ªán t·∫°i")
        
        col1, col2 = st.columns([4, 1])
        
        with col1:
            script_container = st.container()
            with script_container:
                st.text_area(
                    "Script content:",
                    value=st.session_state.current_script,
                    height=600,
                    key="script_display"
                )
        
        with col2:
            # Ch·ªânh s·ª≠a script
            st.subheader("‚úèÔ∏è Ch·ªânh s·ª≠a")
            
            edit_prompt = st.text_area(
                "Y√™u c·∫ßu ch·ªânh s·ª≠a:",
                placeholder="VD: L√†m voiceover c·∫£nh 1 d√†i h∆°n, th√™m c·∫£m x√∫c cho c·∫£nh cu·ªëi...",
                height=100
            )
            
            if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a") and edit_prompt:
                edit_script(edit_prompt, main_prompt, tone)
            
            # Download script
            if st.download_button(
                "üì• Download Script",
                data=st.session_state.current_script,
                file_name=f"video_script_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            ):
                st.success("üì• Script ƒë√£ ƒë∆∞·ª£c download!")

def generate_script(selected_videos, user_orders, main_prompt, tone, preview_mode):
    """T·∫°o script t·ª´ videos ƒë√£ ch·ªçn"""
    try:
        with st.spinner("üé¨ ƒêang t·∫°o script..."):
            video_ids = [v.id for v in selected_videos]
            
            script = st.session_state.generator.generate_script_from_storage(
                video_ids, user_orders, main_prompt, tone
            )
            
            st.session_state.current_script = script
            
            # L∆∞u script history
            save_script_to_history(script, main_prompt, tone, [v.original_name for v in selected_videos])
        
        st.success("‚úÖ Script ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫°o script: {e}")

def edit_script(edit_prompt, main_prompt, tone):
    """Ch·ªânh s·ª≠a script hi·ªán t·∫°i"""
    try:
        with st.spinner("‚úèÔ∏è ƒêang ch·ªânh s·ª≠a script..."):
            new_script = st.session_state.generator._edit_script(
                st.session_state.current_script, edit_prompt, main_prompt, tone
            )
            st.session_state.current_script = new_script
        
        st.success("‚úÖ Script ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói ch·ªânh s·ª≠a: {e}")

def analyze_single_video(video_id):
    """Ph√¢n t√≠ch l·∫°i m·ªôt video"""
    try:
        with st.spinner("üîç ƒêang ph√¢n t√≠ch video..."):
            video_path = st.session_state.generator.storage.get_video_for_analysis(video_id)
            if video_path:
                analysis = st.session_state.generator.analyzer.analyze_video_robust(video_path)
                st.session_state.generator.storage.update_analysis_result(video_id, analysis)
        
        st.success("‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói ph√¢n t√≠ch: {e}")

def compress_single_video(video_id):
    """N√©n m·ªôt video"""
    try:
        with st.spinner("üóúÔ∏è ƒêang n√©n video..."):
            success = st.session_state.generator.storage.compress_and_store(video_id)
            
        if success:
            st.success("‚úÖ N√©n video th√†nh c√¥ng!")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ n√©n video")
        
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói n√©n: {e}")

def delete_single_video(video_id):
    """X√≥a m·ªôt video"""
    try:
        success = st.session_state.generator.storage.delete_video(video_id)
        
        if success:
            st.success("‚úÖ ƒê√£ x√≥a video!")
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ x√≥a video")
        
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói x√≥a: {e}")

def cleanup_old_videos(days_old):
    """D·ªçn d·∫πp videos c≈©"""
    try:
        with st.spinner(f"üßπ ƒêang d·ªçn d·∫πp videos c≈© h∆°n {days_old} ng√†y..."):
            st.session_state.generator.storage.cleanup_old_videos(days_old)
        
        st.success("‚úÖ D·ªçn d·∫πp ho√†n th√†nh!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói d·ªçn d·∫πp: {e}")

def analyze_all_unprocessed():
    """Ph√¢n t√≠ch t·∫•t c·∫£ videos ch∆∞a x·ª≠ l√Ω"""
    try:
        videos = st.session_state.generator.storage.get_all_videos()
        unprocessed = [v for v in videos if not v.analysis_result]
        
        if not unprocessed:
            st.info("üìã T·∫•t c·∫£ videos ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch")
            return
        
        with st.spinner(f"üîç ƒêang ph√¢n t√≠ch {len(unprocessed)} videos..."):
            video_ids = [v.id for v in unprocessed]
            st.session_state.generator.analyze_stored_videos(video_ids)
        
        st.success(f"‚úÖ ƒê√£ ph√¢n t√≠ch {len(unprocessed)} videos!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói ph√¢n t√≠ch: {e}")

def script_history_interface():
    """Giao di·ªán xem l·ªãch s·ª≠ scripts"""
    st.header("üìã L·ªãch s·ª≠ Scripts")
    
    # T·∫°o th∆∞ m·ª•c l∆∞u scripts n·∫øu ch∆∞a c√≥
    scripts_dir = Path("./script_history")
    scripts_dir.mkdir(exist_ok=True)
    
    # L·∫•y danh s√°ch scripts
    script_files = list(scripts_dir.glob("*.json"))
    
    if script_files:
        # S·∫Øp x·∫øp theo th·ªùi gian (m·ªõi nh·∫•t tr∆∞·ªõc)
        script_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        # Hi·ªÉn th·ªã danh s√°ch
        for script_file in script_files:
            try:
                with open(script_file, 'r', encoding='utf-8') as f:
                    script_data = json.load(f)
                
                with st.expander(f"üìÑ {script_data.get('title', script_file.name)} - {script_data.get('created_time', '')}"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**Ch·ªß ƒë·ªÅ:** {script_data.get('main_prompt', 'N/A')}")
                        st.write(f"**Tone:** {script_data.get('tone', 'N/A')}")
                        st.write(f"**Videos:** {', '.join(script_data.get('video_names', []))}")
                        
                        st.text_area(
                            "Script content:",
                            value=script_data.get('script_content', ''),
                            height=200,
                            key=f"script_{script_file.name}"
                        )
                    
                    with col2:
                        if st.button("üì• Download", key=f"download_{script_file.name}"):
                            st.download_button(
                                "üì• T·∫£i xu·ªëng",
                                data=script_data.get('script_content', ''),
                                file_name=f"{script_file.stem}.txt",
                                mime="text/plain"
                            )
                        
                        if st.button("üóëÔ∏è X√≥a", key=f"del_script_{script_file.name}"):
                            script_file.unlink()
                            st.success("‚úÖ ƒê√£ x√≥a script!")
                            st.rerun()
            
            except Exception as e:
                st.error(f"‚ùå L·ªói ƒë·ªçc script {script_file.name}: {e}")
    
    else:
        st.info("üì≠ Ch∆∞a c√≥ script n√†o ƒë∆∞·ª£c l∆∞u.")

def save_script_to_history(script_content, main_prompt, tone, video_names):
    """L∆∞u script v√†o l·ªãch s·ª≠"""
    try:
        scripts_dir = Path("./script_history")
        scripts_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        script_data = {
            "title": f"Script_{timestamp}",
            "created_time": datetime.now().isoformat(),
            "main_prompt": main_prompt,
            "tone": tone,
            "video_names": video_names,
            "script_content": script_content
        }
        
        script_file = scripts_dir / f"script_{timestamp}.json"
        with open(script_file, 'w', encoding='utf-8') as f:
            json.dump(script_data, f, ensure_ascii=False, indent=2)
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u script history: {e}")

# Footer
def show_footer():
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 20px;'>
        üé¨ <strong>Video Analysis & Script Generator</strong><br>
        Powered by Gemini AI + Claude AI | Made with Streamlit
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
    show_footer()